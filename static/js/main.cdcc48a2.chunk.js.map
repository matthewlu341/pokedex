{"version":3,"sources":["Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","string","charAt","toUpperCase","slice","id","this","toUpper","props","name","type","alt","src","frontSprite","backSprite","shinyFront","shinyBack","height","toFixed","weight","stats","map","stat","base_stat","abilities","ability","Component","App","state","cardVisible","currentPoke","femaleFront","femaleBack","handleError","bind","handleSearch","response","ok","Error","query","document","getElementById","value","fetch","then","workingRes","json","data","setState","sprites","front_default","back_default","front_shiny","back_shiny","front_female","back_female","types","catch","err","style","backgroundImage","backgroundSize","width","onSearch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","href","rel","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.cdcc48a2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './App.css';\r\n\r\nexport default class Pokemon extends Component {\r\n    toUpper(string){\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n    render() {\r\n        return (\r\n            <div id='card'> \r\n                <h1>{(this.toUpper(this.props.name))} ({(this.props.type)})</h1>\r\n                <div id='sprites'>\r\n                    <img alt='front sprite' src={this.props.frontSprite}></img>\r\n                    <img alt= 'back sprite' src={this.props.backSprite}></img>\r\n                    <img alt='front sprite' src={this.props.shinyFront}></img>\r\n                    <img alt= 'back sprite' src={this.props.shinyBack}></img>\r\n                </div>\r\n                <div id='info'>\r\n                    <div id='stats'>\r\n                        <h2>Stats</h2>\r\n                        <div id='literalStats'>\r\n                            <h3>Height: {(0.1*this.props.height).toFixed(1)} meters </h3>\r\n                            <h3>Weight: {(0.2*this.props.weight).toFixed(1)} pounds</h3>\r\n                            {this.props.stats.map(stat => <h3>\r\n                                {stat.stat.name}: {stat.base_stat}\r\n                            </h3>)}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div id='abilities'>\r\n                        <h2>Abilities</h2>\r\n                        <div id='literalAbilities'>\r\n                            {this.props.abilities.map(ability => <h3>\r\n                                {ability.ability.name}\r\n                            </h3>)}\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from '@opuscapita/react-searchbar';\nimport Pokemon from './Pokemon'\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      cardVisible: false,\n      currentPoke: 'init',\n      frontSprite: '',\n      backSprite: '',\n      shinyFront: '',\n      shinyBack: '',\n      femaleFront: '',\n      femaleBack: '',\n      height: 0,\n      weight: 0,\n      abilities: [],\n      stats: [],\n      type: ''\n      \n    }\n    this.handleError = this.handleError.bind(this)\n    this.handleSearch = this.handleSearch.bind(this)\n  }\n\n  handleError(response){\n    if (!response.ok){\n      throw Error('err')\n    }\n    return response\n  }\n\n  handleSearch(){\n    let query = document.getElementById('oc-react-searchbar-input').value;\n    fetch(`https://pokeapi.co/api/v2/pokemon/${query}`)\n      .then(response => this.handleError(response))\n        .then(workingRes => workingRes.json())\n          .then(data=>this.setState({\n            currentPoke: data.name,\n            frontSprite: data.sprites.front_default,\n            backSprite: data.sprites.back_default,\n            shinyFront: data.sprites.front_shiny,\n            shinyBack: data.sprites.back_shiny,\n            femaleFront: data.sprites.front_female,\n            femaleBack: data.sprites.back_female,\n            height: data.height,\n            weight: data.weight,\n            abilities: data.abilities,\n            stats: data.stats,\n            type: data.types[0].type.name\n          }))\n      .catch(err=>this.setState({currentPoke: 'err'}))\n  }\n\n  render(){\n    return (\n      <div id='app' style={{\n        backgroundImage:`url(${'https://images.alphacoders.com/998/thumb-1920-998181.jpg'})`,\n        backgroundSize: 'cover',\n        width: '100vw',\n        height: '100vh'\n        }}>\n\n        <div id='search'>\n          <h1 id='title'>Online Pokedex</h1>\n          <SearchBar onSearch={this.handleSearch}/>\n        </div>\n\n        <div id='pokemon'>\n          {this.state.currentPoke==='init'? <div></div>\n          :\n\n          this.state.currentPoke==='err' ? <div id='err'><h1>Not found.</h1></div> : \n          \n          <Pokemon name={this.state.currentPoke} \n          frontSprite={this.state.frontSprite} \n          backSprite={this.state.backSprite}\n          height={this.state.height}\n          weight={this.state.weight}\n          abilities={this.state.abilities}\n          stats={this.state.stats}\n          type = {this.state.type}\n          shinyFront ={this.state.shinyFront}\n          shinyBack ={this.state.shinyBack}\n          femaleFront ={this.state.femaleFront}\n          femaleBack ={this.state.femaleBack}\n          ></Pokemon> \n        \n        }\n          \n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@300&display=swap\" rel=\"stylesheet\"></link>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}